%code requires {
int yylex(); 

#include <stdio.h>
#include "structs.hpp"
#include "assembler.hpp"
#include <string.h>
using namespace std;

extern FILE *yyin;
int yyerror(const char *p);
int yylex();
extern LineArguments* lineToParse;

}


%{
%}

%union{
  int val;
  string* stringType;
  LineArguments* stringVector;
}


%token EOL COMMA DOLLAR PERCENTAGE LEFTBRACKET RIGHTBRACKET PLUS STAR COLON
%token GLOBALDIR EXTERNDIR SECTIONDIR WORDDIR SKIPDIR ENDDIR
%token HALT INT IRET CALL RET JMP JEQ JNE JGT PUSH POP XCHG ADD SUB MUL DIV CMP NOT AND OR XOR TEST SHL SHR LDR STR

%token <stringType> R0 
%token <stringType> R1 
%token <stringType> R2 
%token <stringType> R3 
%token <stringType> R4
%token <stringType> R5
%token <stringType> R6
%token <stringType> R7
%token <stringType> PSW


%token <stringType> SYMBOL
%token <stringType> LITERAL

%type <stringVector> symOrLiteralList
%type <stringVector> symbList
%type <stringType> register
%type <stringVector> operand
%type <stringVector> operandJmp


%%

input: {}
  | line input {}
  ;

line: EOL {}
  | SYMBOL COLON EOL {assemblyLabel($1);}

  /* LABEL directive parameters EOL */

  | SYMBOL COLON GLOBALDIR symbList EOL {assemblyLabel($1); assemblyGlobalDirective($4);}
  | SYMBOL COLON EXTERNDIR symbList EOL {assemblyLabel($1); assemblyExternDirective($4);}
  | SYMBOL COLON SECTIONDIR SYMBOL EOL {assemblyLabel($1); assemblySectionDirective($4);}
  | SYMBOL COLON WORDDIR symOrLiteralList EOL {assemblyLabel($1); assemblyWordDirective($4);} 
  | SYMBOL COLON SKIPDIR LITERAL EOL {assemblyLabel($1); assemblySkipDirective($4);}
  | SYMBOL COLON ENDDIR EOL {assemblyLabel($1); assemblyEndDirective(); return 44;}

  /* directive parameters EOL */

  | GLOBALDIR symbList EOL {assemblyGlobalDirective($2); delete $2;}
  | EXTERNDIR symbList EOL {assemblyExternDirective($2); delete $2;}
  | SECTIONDIR SYMBOL EOL {assemblySectionDirective($2);}
  | WORDDIR symOrLiteralList EOL {assemblyWordDirective($2); delete $2;}
  | SKIPDIR LITERAL EOL {assemblySkipDirective($2);}
  | ENDDIR {assemblyEndDirective(); return 44;}
  | ENDDIR EOL {assemblyEndDirective(); return 44;}

  /* LABEL instructions parameters EOL */
  | SYMBOL COLON HALT EOL {assemblyLabel($1); assemblyHALT();}
  | SYMBOL COLON INT register EOL {assemblyLabel($1); assemblyINT($4);}
  | SYMBOL COLON IRET EOL {assemblyLabel($1); assemblyIRET();}
  | SYMBOL COLON CALL operandJmp EOL {assemblyLabel($1); assemblyCALL($4);} 
  | SYMBOL COLON RET EOL {assemblyLabel($1); assemblyRET();}
  | SYMBOL COLON JMP operandJmp EOL {assemblyLabel($1); assemblyJMP($4);}
  | SYMBOL COLON JEQ operandJmp EOL {assemblyLabel($1); assemblyJEQ($4);}
  | SYMBOL COLON JNE operandJmp EOL {assemblyLabel($1); assemblyJNE($4);}
  | SYMBOL COLON JGT operandJmp EOL {assemblyLabel($1); assemblyJGT($4);}
  | SYMBOL COLON PUSH register EOL {assemblyLabel($1); assemblyPUSH($4);}
  | SYMBOL COLON POP register EOL {assemblyLabel($1); assemblyPOP($4);}
  | SYMBOL COLON XCHG register COMMA register EOL {assemblyLabel($1); assemblyXCHG($4, $6);}
  | SYMBOL COLON ADD register COMMA register EOL {assemblyLabel($1); assemblyADD($4, $6);}
  | SYMBOL COLON SUB register COMMA register EOL {assemblyLabel($1); assemblySUB($4, $6);}
  | SYMBOL COLON MUL register COMMA register EOL {assemblyLabel($1); assemblyMUL($4, $6);}
  | SYMBOL COLON DIV register COMMA register EOL {assemblyLabel($1); assemblyDIV($4, $6);}
  | SYMBOL COLON CMP register COMMA register EOL {assemblyLabel($1); assemblyCMP($4, $6);}
  | SYMBOL COLON NOT register EOL {assemblyLabel($1); assemblyNOT($4);}
  | SYMBOL COLON AND register COMMA register EOL {assemblyLabel($1); assemblyAND($4, $6);}
  | SYMBOL COLON OR register COMMA register EOL {assemblyLabel($1); assemblyOR($4, $6);}
  | SYMBOL COLON XOR register COMMA register EOL {assemblyLabel($1); assemblyXOR($4, $6);}
  | SYMBOL COLON TEST register COMMA register EOL {assemblyLabel($1); assemblyTEST($4, $6);}
  | SYMBOL COLON SHL register COMMA register EOL {assemblyLabel($1); assemblySHL($4, $6);}
  | SYMBOL COLON SHR register COMMA register EOL {assemblyLabel($1); assemblySHR($4, $6);}
  | SYMBOL COLON LDR register COMMA operand EOL {assemblyLabel($1); assemblyLDR($4, $6);}
  | SYMBOL COLON STR register COMMA operand EOL {assemblyLabel($1); assemblySTR($4, $6);}

  /* instructions parameters EOL */
  | HALT EOL {assemblyHALT();}
  | INT register EOL {assemblyINT($2);}
  | IRET EOL {assemblyIRET();}
  | CALL operandJmp EOL {assemblyCALL($2);}
  | RET EOL {assemblyRET();}
  | JMP operandJmp EOL {assemblyJMP($2);}
  | JEQ operandJmp EOL {assemblyJEQ($2);}
  | JNE operandJmp EOL {assemblyJNE($2);} 
  | JGT operandJmp EOL {assemblyJGT($2);}
  | PUSH register EOL {assemblyPUSH($2);}
  | POP register EOL {assemblyPOP($2);}
  | XCHG register COMMA register EOL {assemblyXCHG($2, $4);}
  | ADD register COMMA register EOL {assemblyADD($2, $4);}
  | SUB register COMMA register EOL {assemblySUB($2, $4);}
  | MUL register COMMA register EOL {assemblyMUL($2, $4);}
  | DIV register COMMA register EOL {assemblyDIV($2, $4);}
  | CMP register COMMA register EOL {assemblyCMP($2, $4);}
  | NOT register EOL {assemblyNOT($2);}
  | AND register COMMA register EOL {assemblyAND($2, $4);}
  | OR register COMMA register EOL {assemblyOR($2, $4);}
  | XOR register COMMA register EOL {assemblyXOR($2, $4);}
  | TEST register COMMA register EOL {assemblyTEST($2, $4);}
  | SHL register COMMA register EOL {assemblySHL($2, $4);}
  | SHR register COMMA register EOL {assemblySHR($2, $4);}
  | LDR register COMMA operand EOL {assemblyLDR($2, $4);}
  | STR register COMMA operand EOL {assemblySTR($2, $4); delete $4;}
  ;


operand: DOLLAR LITERAL {$$ = new LineArguments($2, 1, 10);}
  | DOLLAR SYMBOL {$$ = new LineArguments($2, 0, 11);}
  | LITERAL {$$ = new LineArguments($1, 1, 12);}
  | SYMBOL {$$ = new LineArguments($1, 0, 13);}
  | PERCENTAGE SYMBOL {$$ = new LineArguments($2, 0, 14);}
  | register {$$ = new LineArguments($1, 2, 15);}
  | LEFTBRACKET register RIGHTBRACKET {$$ = new LineArguments($2, 2, 16);}
  | LEFTBRACKET register PLUS LITERAL RIGHTBRACKET {$$ = new LineArguments($2, 2, 17); $$->argName->push_back($4); $$->argType->push_back(1);}
  | LEFTBRACKET register PLUS SYMBOL RIGHTBRACKET {$$ = new LineArguments($2, 2, 18); $$->argName->push_back($4); $$->argType->push_back(0);}
  ;


operandJmp: LITERAL {$$ = new LineArguments($1, 1, 20);}
  | SYMBOL {$$ = new LineArguments($1, 0, 21);}
  | PERCENTAGE SYMBOL {$$ = new LineArguments($2, 0, 22);}
  | STAR LITERAL {$$ = new LineArguments($2, 1, 23);}
  | STAR SYMBOL {$$ = new LineArguments($2, 0, 24);}
  | STAR register {$$ = new LineArguments($2, 2, 25);}
  | STAR LEFTBRACKET register RIGHTBRACKET {$$ = new LineArguments($3, 2, 26);}
  | STAR LEFTBRACKET register PLUS LITERAL RIGHTBRACKET {$$ = new LineArguments($3, 2, 27); $$->argName->push_back($5); $$->argType->push_back(1);}
  | STAR LEFTBRACKET register PLUS SYMBOL RIGHTBRACKET {$$ = new LineArguments($3, 2, 28); $$->argName->push_back($5); $$->argType->push_back(0);}
  ;



symOrLiteralList: SYMBOL {$$ = new LineArguments($1, 0, 0);}
  | LITERAL {$$ = new LineArguments($1, 1, 0);}
  | symOrLiteralList COMMA SYMBOL {$1->argName->push_back($3); $1->argType->push_back(0);$$ = $1;}
  | symOrLiteralList COMMA LITERAL {$1->argName->push_back($3); $1->argType->push_back(1);$$ = $1;}
  ;


symbList: SYMBOL {$$ = new LineArguments($1, 0, 0);}
  | symbList COMMA SYMBOL {$1->argName->push_back($3); $1->argType->push_back(0);$$ = $1;}
  ;

register: R0 {$$ = $1;}
  | R1 {$$ = $1;}
  | R2 {$$ = $1;}
  | R3 {$$ = $1;}
  | R4 {$$ = $1;}
  | R5 {$$ = $1;}
  | R6 {$$ = $1;}
  | R7 {$$ = $1;}
  | PSW {$$ = $1;}
  ;

%%

int parser_main(int argc, char *argv[]){
  FILE *fp = NULL;
  if(argc == 2){
    fp = fopen(argv[1], "r");

    if(fp == NULL){
      perror("Failed to open file.");
      return -1;
    }
    else{
      yyin = fp;
    }
  }
  else if(argc == 4){
    fp = fopen(argv[3], "r");

    if(fp == NULL){
      perror("Failed to open file.");
      return -1;
    }
    else{
      yyin = fp;
    }
  }

  
  while(yyparse() != 44){
  
  }
    

  if(fp!=NULL){
    fclose(fp);
  }

  return 0;

}


int yyerror(const char *p){
  printf("%s\n", p);
  return 0;
}