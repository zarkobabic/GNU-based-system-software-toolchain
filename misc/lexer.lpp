%{
#include "parser.tab.hpp"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
struct LineArguments;


%}

%option noyywrap



%%
\* {return STAR;}
":" {return COLON;}
"+" {return PLUS;}
"[" {return LEFTBRACKET;}
"]" {return RIGHTBRACKET;}
"%" {return PERCENTAGE;}
"$" {return DOLLAR;}
, {return COMMA;}
#.* {}   /* komentari, selektuje sve do novog reda od tarabe kao komentar */
\.[gG][lL][oO][bB][aA][lL] {return GLOBALDIR;}
\.[eE][xX][tT][eE][rR][nN] {return EXTERNDIR;}
\.[sS][eE][cC][tT][iI][oO][nN] {return SECTIONDIR;}
\.[wW][oO][rR][dD] {return WORDDIR;}
\.[sS][kK][iI][pP] {return SKIPDIR;}
\.[eE][nN][dD] {return ENDDIR;}
[hH][aA][lL][tT] {return HALT;}
[iI][nN][tT] {return INT;}
[iI][rR][eE][tT] {return IRET;}
[cC][aA][lL][lL] {return CALL;}
[rR][eE][tT] {return RET;}
[jJ][mM][pP] {return JMP;}
[jJ][eE][qQ] {return JEQ;}
[jJ][nN][eE] {return JNE;}
[jJ][gG][tT] {return JGT;}
[pP][uU][sS][hH] {return PUSH;}
[pP][oO][pP] {return POP;}
[xX][cC][hH][gG] {return XCHG;}
[aA][dD][dD] {return ADD;}
[sS][uU][bB] {return SUB;}
[mM][uU][lL] {return MUL;}
[dD][iI][vV] {return DIV;}
[cC][mM][pP] {return CMP;}
[nN][oO][tT] {return NOT;}
[aA][nN][dD] {return AND;}
[oO][rR] {return OR;}
[xX][oO][rR] {return XOR;}
[tT][eE][sS][tT] {return TEST;}
[sS][hH][lL] {return SHL;}
[sS][hH][rR] {return SHR;}
[lL][dD][rR] {return LDR;}
[sS][tT][rR] {return STR;}
[rR]0 {yylval.stringType = new std::string("R0"); return R0;}
[rR]1 {yylval.stringType = new std::string("R1"); return R1;}
[rR]2 {yylval.stringType = new std::string("R2"); return R2;}
[rR]3 {yylval.stringType = new std::string("R3"); return R3;}
[rR]4 {yylval.stringType = new std::string("R4"); return R4;}
[rR]5 {yylval.stringType = new std::string("R5"); return R5;}
([rR]6|[sS][pP]) {yylval.stringType = new std::string("R6"); return R6;}
([rR]7|[pP][cC]) {yylval.stringType = new std::string("R7"); return R7;}
[pP][sS][wW] {yylval.stringType = new std::string("PSW"); return PSW;}
(([-]?[0-9\.]+)|([-]?0x[0-9a-fA-F]+)|([-]?0[0-7]+)) {yylval.stringType = new std::string(yytext);return LITERAL;}
[a-zA-Z][a-zA-Z0-9_]* {yylval.stringType = new std::string(yytext);return SYMBOL;}
[ \t] {}
\n {return EOL;}
. {}
%%

